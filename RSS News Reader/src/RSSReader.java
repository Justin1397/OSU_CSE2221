import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Junyu Xue
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page
     * title</title></head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        // to create the variables that stored the position of child
        int titleIndex = getChildElement(channel, "title");
        int descriptionIndex = getChildElement(channel, "description");
        int linkIndex = getChildElement(channel, "link");
        //print the format, such as html and head
        out.println("<html>");
        out.println("<head>");
        //test if title is empty
        if (channel.child(titleIndex).numberOfChildren() > 0) {
            //if not, print out the title
            out.println("<title>" + channel.child(titleIndex).child(0).label()
                    + "</title>");
        } else {
            //if yes, print Empty Title
            out.println("<title>Empty Title</title>");
        }
        //print out the format, such as body
        out.println("</head>");
        out.println("<body>");
        //print out the page title with a link
        out.println("<h1><a href=\"" + channel.child(linkIndex).child(0).label()
                + "\">" + channel.child(titleIndex).child(0).label()
                + "</a></h1>");
        //test if description is empty
        if (channel.child(descriptionIndex).numberOfChildren() > 0) {
            //if not, print out the description
            out.println("<p>" + channel.child(descriptionIndex).child(0).label()
                    + "</p>");
        } else {
            //if yes, print No description
            out.println("<p>No description</p>");
        }
        //print out the format of the table
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        //print out the closing tags
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        //read the number of the child
        int childNum = xml.numberOfChildren();
        //create the variables needed
        int i = 0;
        int childIndex = -1;
        //the loop that check if the child "tag" is available
        while (i < childNum) {
            //to set the value of index of the child
            if ((xml.child(i).label()).equals(tag)) {
                childIndex = i;
            }
            i++;
        }
        //return the index of the child
        return childIndex;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        //create the variables of the index of children
        int dateIndex = getChildElement(item, "pubDate");
        int sourceIndex = getChildElement(item, "source");
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        int linkIndex = getChildElement(item, "link");
        //to print out the date of publishing
        if (dateIndex != -1 && item.child(dateIndex).numberOfChildren() > 0) {
            //if there is a date, print out
            out.println(
                    "<td>" + item.child(dateIndex).child(0).label() + "</td>");
        } else {
            //if not, print No date available
            out.println("<td>No date available</td>");
        }
        //to print out the source
        if (sourceIndex != -1
                && item.child(sourceIndex).numberOfChildren() > 0) {
            //if there is a link, print out
            out.println("<td><a href=\""
                    + item.child(sourceIndex).attributeValue("url") + "\">"
                    + item.child(sourceIndex).child(0).label() + "</a></td>");
        } else {
            //if not, print No source available
            out.println("<td>No source available</td>");
        }
        //To print out the title or description, and the link if there is one
        //print the format of table
        out.print("<td>");
        //if the link is available, print it and its format
        if (linkIndex != -1 && item.child(linkIndex).numberOfChildren() > 0) {
            out.print("<a href=\"" + item.child(linkIndex).child(0).label()
                    + "\">");
        }
        //if the title is available, print it
        if (titleIndex != -1 && item.child(titleIndex).numberOfChildren() > 0) {
            out.println(item.child(titleIndex).child(0).label());
            //if title is not available, print description
        } else if (item.child(descriptionIndex).numberOfChildren() > 0) {
            out.println(item.child(descriptionIndex).child(0).label());
            //if nothing is in, print No title available
        } else {
            out.println("No title available");
        }
        //if the link is available, print the format
        if (linkIndex != -1 && item.child(linkIndex).numberOfChildren() > 0) {
            out.print("</a></td>");
        } else {
            out.print("</td>");
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        //ask user to enter a URL
        out.print("Enter a URL of an RSS 2.0: ");
        String url = in.nextLine();
        //create a XMLTree
        XMLTree rss = new XMLTree1(url);
        //check if rss is available
        while (rss.label() != "rss" && !(rss.hasAttribute("version"))
                && rss.attributeValue("version") != "2.0") {
            out.print("Enter a URL of an RSS 2.0: ");
            url = in.nextLine();
            rss = new XMLTree1(url);
        }
        //ask for a file
        out.print(
                "Enter the name of an output file including the .html extension: ");
        String fileName = in.nextLine();
        SimpleWriter outFile = new SimpleWriter1L(fileName);
        //find the channel
        XMLTree channel = rss.child(getChildElement(rss, "channel"));
        //output the headers into the file
        outputHeader(channel, outFile);
        //output the table into the file
        int itemNum = channel.numberOfChildren();
        int i = 0;
        while (i < itemNum) {
            if ((channel.child(i).label()).equals("item")) {
                outFile.println("<tr>");
                processItem(channel.child(i), outFile);
                outFile.println("</tr>");

            }
            i++;
        }
        //output the footers into the file
        outputFooter(outFile);

        in.close();
        out.close();
        outFile.close();
    }

}
